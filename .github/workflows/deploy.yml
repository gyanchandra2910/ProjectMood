name: 🚀 MoodFusion CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: moodfusion-backend
  FRONTEND_IMAGE_NAME: moodfusion-frontend

jobs:
  # Test and Quality Checks
  test:
    name: 🧪 Run Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: test123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
          --health-start-period 40s

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: 📦 Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: 📦 Install frontend dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps

      - name: 🔍 Run ESLint (Backend)
        working-directory: ./backend
        run: npm run lint || true

      - name: 🔍 Run ESLint (Frontend)
        working-directory: ./frontend
        run: npm run lint || true

      - name: 🧪 Run backend unit tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          MONGODB_TEST_URI: mongodb://admin:test123@localhost:27017/moodfusion_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci-cd-pipeline
        run: npm test

      - name: 🧪 Run frontend tests
        working-directory: ./frontend
        env:
          CI: true
          REACT_APP_API_URL: http://localhost:3001
          REACT_APP_SOCKET_URL: http://localhost:3001
        run: npm test -- --coverage --watchAll=false

      - name: 🧪 Run integration tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          MONGODB_TEST_URI: mongodb://admin:test123@localhost:27017/moodfusion_integration_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-integration-tests
        run: npm run test:integration

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
          flags: unittests
          name: moodfusion-coverage
          fail_ci_if_error: false

      - name: 🔒 Run security audit
        run: |
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high

  # Build Docker Images
  build:
    name: 🏗️ Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ matrix.component == 'backend' && env.BACKEND_IMAGE_NAME || env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security Scanning
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ matrix.component == 'backend' && env.BACKEND_IMAGE_NAME || env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.component }}.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.component }}.sarif'

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Render (Staging)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_BACKEND: ${{ secrets.RENDER_SERVICE_ID_BACKEND_STAGING }}
          RENDER_SERVICE_ID_FRONTEND: ${{ secrets.RENDER_SERVICE_ID_FRONTEND_STAGING }}
        run: |
          # Deploy backend
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID_BACKEND}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}'
          
          # Deploy frontend
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID_FRONTEND}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}'

      - name: 🏥 Health check staging deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 60
          
          # Check backend health
          curl -f ${{ secrets.STAGING_BACKEND_URL }}/api/health || exit 1
          
          # Check frontend
          curl -f ${{ secrets.STAGING_FRONTEND_URL }} || exit 1
          
          echo "✅ Staging deployment is healthy"

  # Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production')
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Render (Production)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_BACKEND: ${{ secrets.RENDER_SERVICE_ID_BACKEND_PROD }}
          RENDER_SERVICE_ID_FRONTEND: ${{ secrets.RENDER_SERVICE_ID_FRONTEND_PROD }}
        run: |
          # Deploy backend
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID_BACKEND}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}'
          
          # Deploy frontend
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID_FRONTEND}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}'

      - name: 🏥 Health check production deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 90
          
          # Check backend health
          curl -f ${{ secrets.PRODUCTION_BACKEND_URL }}/api/health || exit 1
          
          # Check frontend
          curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }} || exit 1
          
          echo "✅ Production deployment is healthy"

      - name: 📢 Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "🎉 MoodFusion has been successfully deployed to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📢 Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: "❌ MoodFusion production deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment Tests
  e2e-tests:
    name: 🧪 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install

      - name: 🧪 Run E2E tests
        env:
          BASE_URL: ${{ secrets.STAGING_FRONTEND_URL }}
          API_URL: ${{ secrets.STAGING_BACKEND_URL }}
        run: |
          # Add your E2E test commands here
          echo "Running E2E tests against staging environment"
          # npx playwright test

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7
