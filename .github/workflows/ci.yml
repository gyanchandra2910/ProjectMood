# GitHub Actions workflow that runs npm install and npm test for both frontend and backend
# This workflow ensures code quality and prevents broken builds

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests
  backend:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
    
    - name: Check server starts
      run: |
        timeout 30s npm start &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        kill $!

  # Frontend Tests  
  frontend:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/build/
        retention-days: 7

  # Integration Tests
  integration:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    services:
      # Add any required services here (Redis, PostgreSQL, etc.)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Start backend server
      run: |
        cd backend
        npm start &
        echo $! > backend.pid
        sleep 10
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Test backend health
      run: |
        curl -f http://localhost:3001/health
        curl -f http://localhost:3001/
    
    - name: Cleanup
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
        fi

  # Security Audit
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Audit backend dependencies
      run: |
        cd backend
        npm audit --audit-level high
    
    - name: Audit frontend dependencies
      run: |
        cd frontend
        npm audit --audit-level high

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Build frontend for production
      run: |
        cd frontend
        npm ci
        npm run build
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add your deployment commands here
        # Example: rsync, docker build/push, etc.
    
    - name: Notify deployment
      run: |
        echo "âœ… Deployment completed successfully!"
        # Add notification logic (Slack, Discord, etc.)
